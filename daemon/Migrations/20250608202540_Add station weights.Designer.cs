// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using daemon.Database;

#nullable disable

namespace daemon.Migrations
{
    [DbContext(typeof(NavigatorDbContext))]
    [Migration("20250608202540_Add station weights")]
    partial class Addstationweights
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("core")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("daemon.Models.Database.IdentifiedRisId", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(73)
                        .HasColumnType("character varying(73)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DiscoveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("discovery_date");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen");

                    b.Property<DateTime?>("LastSucceededAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_succeeded_at");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("product");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ris_ids", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Journey", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(82)
                        .HasColumnType("character varying(82)")
                        .HasColumnName("journey_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("journeys", "core", t =>
                        {
                            t.HasCheckConstraint("journey_id_format", "journey_id ~ '^\\d{8}-[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$'");
                        });
                });

            modelBuilder.Entity("daemon.Models.Database.JourneyMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("JourneyId")
                        .IsRequired()
                        .HasMaxLength(82)
                        .HasColumnType("character varying(82)")
                        .HasColumnName("journey_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("message");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("summary");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("journey_messages", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaNumber")
                        .HasColumnType("integer")
                        .HasColumnName("eva_number");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<bool>("QueryingEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("querying_enabled");

                    b.HasKey("Id");

                    b.HasIndex("EvaNumber");

                    b.ToTable("station_products", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Ril100", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaNumber")
                        .HasColumnType("integer")
                        .HasColumnName("eva_number");

                    b.Property<string>("Ril100Identifier")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("ril100");

                    b.HasKey("Id");

                    b.HasIndex("EvaNumber");

                    b.ToTable("station_ril100", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Station", b =>
                {
                    b.Property<int>("EvaNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("eva_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EvaNumber"));

                    b.Property<DateTime?>("LastQueried")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_queried");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.Property<bool?>("QueryingEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("querying_enabled");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("EvaNumber");

                    b.HasIndex("EvaNumber")
                        .IsUnique();

                    b.ToTable("stations", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("cancelled");

                    b.Property<int>("EvaNumber")
                        .HasColumnType("integer")
                        .HasColumnName("eva_number");

                    b.Property<string>("JourneyId")
                        .IsRequired()
                        .HasMaxLength(82)
                        .HasColumnType("character varying(82)")
                        .HasColumnName("journey_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("journey_via-stops", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.StopMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("message");

                    b.Property<int>("StopId")
                        .HasColumnType("integer")
                        .HasColumnName("stop_id");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("summary");

                    b.HasKey("Id");

                    b.HasIndex("StopId");

                    b.ToTable("journey_stop_messages", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Journey", b =>
                {
                    b.OwnsOne("daemon.Models.Database.LineInformation", "LineInformation", b1 =>
                        {
                            b1.Property<string>("JourneyId")
                                .HasColumnType("character varying(82)");

                            b1.Property<string>("JourneyName")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("journey_name");

                            b1.Property<string>("JourneyNumber")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("journey_number");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("product_name");

                            b1.Property<string>("ProductType")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("product_type");

                            b1.HasKey("JourneyId");

                            b1.ToTable("journeys", "core");

                            b1.WithOwner()
                                .HasForeignKey("JourneyId");
                        });

                    b.OwnsOne("daemon.Models.Database.Operator", "Operator", b1 =>
                        {
                            b1.Property<string>("JourneyId")
                                .HasColumnType("character varying(82)");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("operator_code");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(512)
                                .HasColumnType("character varying(512)")
                                .HasColumnName("operator_name");

                            b1.HasKey("JourneyId");

                            b1.ToTable("journeys", "core");

                            b1.WithOwner()
                                .HasForeignKey("JourneyId");
                        });

                    b.Navigation("LineInformation")
                        .IsRequired();

                    b.Navigation("Operator")
                        .IsRequired();
                });

            modelBuilder.Entity("daemon.Models.Database.JourneyMessage", b =>
                {
                    b.HasOne("daemon.Models.Database.Journey", "Journey")
                        .WithMany("Messages")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("daemon.Models.Database.Product", b =>
                {
                    b.HasOne("daemon.Models.Database.Station", "Station")
                        .WithMany("Products")
                        .HasForeignKey("EvaNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("daemon.Models.Database.Ril100", b =>
                {
                    b.HasOne("daemon.Models.Database.Station", "Station")
                        .WithMany("Ril100")
                        .HasForeignKey("EvaNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("daemon.Models.Database.Station", b =>
                {
                    b.OwnsOne("daemon.Models.Database.Coordinates", "Coordinates", b1 =>
                        {
                            b1.Property<int>("StationEvaNumber")
                                .HasColumnType("integer");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision")
                                .HasColumnName("latitude");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision")
                                .HasColumnName("longitude");

                            b1.HasKey("StationEvaNumber");

                            b1.ToTable("stations", "core");

                            b1.WithOwner()
                                .HasForeignKey("StationEvaNumber");
                        });

                    b.Navigation("Coordinates")
                        .IsRequired();
                });

            modelBuilder.Entity("daemon.Models.Database.Stop", b =>
                {
                    b.HasOne("daemon.Models.Database.Journey", "Journey")
                        .WithMany("ViaStops")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("daemon.Models.Database.Time", "Arrival", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("ActualPlatform")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("arrival_actual_platform");

                            b1.Property<DateTime>("ActualTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("arrival_actual_time");

                            b1.Property<int>("Delay")
                                .HasColumnType("integer")
                                .HasColumnName("arrival_delay");

                            b1.Property<string>("PlannedPlatform")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("arrival_planned_platform");

                            b1.Property<DateTime>("PlannedTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("arrival_planned_time");

                            b1.HasKey("Id");

                            b1.ToTable("journey_via-stops", "core");

                            b1.WithOwner()
                                .HasForeignKey("Id");
                        });

                    b.OwnsOne("daemon.Models.Database.Time", "Departure", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("ActualPlatform")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("departure_actual_platform");

                            b1.Property<DateTime>("ActualTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("departure_actual_time");

                            b1.Property<int>("Delay")
                                .HasColumnType("integer")
                                .HasColumnName("departure_delay");

                            b1.Property<string>("PlannedPlatform")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)")
                                .HasColumnName("departure_planned_platform");

                            b1.Property<DateTime>("PlannedTime")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("departure_planned_time");

                            b1.HasKey("Id");

                            b1.ToTable("journey_via-stops", "core");

                            b1.WithOwner()
                                .HasForeignKey("Id");
                        });

                    b.Navigation("Arrival");

                    b.Navigation("Departure");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("daemon.Models.Database.StopMessage", b =>
                {
                    b.HasOne("daemon.Models.Database.Stop", "Stop")
                        .WithMany("Messages")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("daemon.Models.Database.Journey", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("ViaStops");
                });

            modelBuilder.Entity("daemon.Models.Database.Station", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Ril100");
                });

            modelBuilder.Entity("daemon.Models.Database.Stop", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
