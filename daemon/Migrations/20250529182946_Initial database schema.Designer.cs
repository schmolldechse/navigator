// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using daemon.Database;

#nullable disable

namespace daemon.Migrations
{
    [DbContext(typeof(NavigatorDbContext))]
    [Migration("20250529182946_Initial database schema")]
    partial class Initialdatabaseschema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("core")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("daemon.Models.Database.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaNumber")
                        .HasColumnType("integer")
                        .HasColumnName("eva_number");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.HasKey("Id");

                    b.HasIndex("EvaNumber")
                        .IsUnique();

                    b.ToTable("station_coordinates", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.IdentifiedRisId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DiscoveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("discovery_date");

                    b.Property<DateTime?>("LastSeen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen");

                    b.Property<DateTime?>("LastSucceededAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_succeeded_at");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("product");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("ris_ids", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaNumber")
                        .HasColumnType("integer")
                        .HasColumnName("eva_number");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<bool?>("QueryingEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("querying_enabled");

                    b.HasKey("Id");

                    b.HasIndex("EvaNumber");

                    b.ToTable("station_products", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Ril100", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EvaNumber")
                        .HasColumnType("integer")
                        .HasColumnName("eva_number");

                    b.Property<string>("Ril100Identifier")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("ril100");

                    b.HasKey("Id");

                    b.HasIndex("EvaNumber");

                    b.ToTable("station_ril100", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Station", b =>
                {
                    b.Property<int>("EvaNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("eva_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EvaNumber"));

                    b.Property<DateTime?>("LastQueried")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_queried");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("name");

                    b.Property<bool?>("QueryingEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("querying_enabled");

                    b.HasKey("EvaNumber");

                    b.HasIndex("EvaNumber")
                        .IsUnique();

                    b.ToTable("stations", "core");
                });

            modelBuilder.Entity("daemon.Models.Database.Coordinates", b =>
                {
                    b.HasOne("daemon.Models.Database.Station", "Station")
                        .WithOne("Coordinates")
                        .HasForeignKey("daemon.Models.Database.Coordinates", "EvaNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("daemon.Models.Database.Product", b =>
                {
                    b.HasOne("daemon.Models.Database.Station", "Station")
                        .WithMany("Products")
                        .HasForeignKey("EvaNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("daemon.Models.Database.Ril100", b =>
                {
                    b.HasOne("daemon.Models.Database.Station", "Station")
                        .WithMany("Ril100")
                        .HasForeignKey("EvaNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("daemon.Models.Database.Station", b =>
                {
                    b.Navigation("Coordinates");

                    b.Navigation("Products");

                    b.Navigation("Ril100");
                });
#pragma warning restore 612, 618
        }
    }
}
